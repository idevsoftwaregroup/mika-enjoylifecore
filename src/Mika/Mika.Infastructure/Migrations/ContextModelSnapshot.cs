// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mika.Infastructure.Data;

#nullable disable

namespace Mika.Infastructure.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Mika.Domain.Entities.Account", b =>
                {
                    b.Property<long>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AccountId"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("AccountType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("BelongsToCentralOffice")
                        .HasColumnType("bit");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("Creator")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<decimal>("InterestRatePercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifier")
                        .HasColumnType("bigint");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AccountId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Mika.Domain.Entities.BiDataEntry", b =>
                {
                    b.Property<long>("BiDataEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("BiDataEntryId"));

                    b.Property<long>("AccountBalance")
                        .HasColumnType("bigint");

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<long>("BalanceOfThePreviousDay")
                        .HasColumnType("bigint");

                    b.Property<long>("BalanceWithTheBank")
                        .HasColumnType("bigint");

                    b.Property<long>("BlockadeAmount")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint");

                    b.Property<long>("DefinitiveReceivablePayableDocs")
                        .HasColumnType("bigint");

                    b.Property<long>("DepositDuringTheDay")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EntryDateTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("OnTheWayReceivablePayableDocs")
                        .HasColumnType("bigint");

                    b.Property<long>("WithdrawalBalance")
                        .HasColumnType("bigint");

                    b.Property<long>("WithdrawalDuringTheDay")
                        .HasColumnType("bigint");

                    b.HasKey("BiDataEntryId");

                    b.HasIndex("AccountId");

                    b.HasIndex("CreatorId");

                    b.ToTable("BiDataEntries");
                });

            modelBuilder.Entity("Mika.Domain.Entities.Company", b =>
                {
                    b.Property<long>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CompanyId"));

                    b.Property<string>("CompanyCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CompanyNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("Creator")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifier")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Mika.Domain.Entities.HistoryLog", b =>
                {
                    b.Property<long>("HistoryLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("HistoryLogId"));

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("LoggerId")
                        .HasColumnType("bigint");

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HistoryLogId");

                    b.HasIndex("LoggerId");

                    b.HasIndex("ModuleId");

                    b.ToTable("HistoryLogs");
                });

            modelBuilder.Entity("Mika.Domain.Entities.HistoryLogDetail", b =>
                {
                    b.Property<long>("HistoryLogDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("HistoryLogDetailId"));

                    b.Property<long>("HistoryLogId")
                        .HasColumnType("bigint");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HistoryLogDetailId");

                    b.HasIndex("HistoryLogId");

                    b.ToTable("HistoryLogDetails");
                });

            modelBuilder.Entity("Mika.Domain.Entities.Module", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModuleId"));

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.HasKey("ModuleId");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("Mika.Domain.Entities.RelationalEntities.F_UserAccount", b =>
                {
                    b.Property<long>("F_UserAccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("F_UserAccountId"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("F_UserAccountId");

                    b.HasIndex("AccountId");

                    b.HasIndex("UserId");

                    b.ToTable("F_UserAccounts");
                });

            modelBuilder.Entity("Mika.Domain.Entities.RelationalEntities.F_UserSubModule", b =>
                {
                    b.Property<long>("F_UserSubModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("F_UserSubModuleId"));

                    b.Property<int>("SubModuleId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("F_UserSubModuleId");

                    b.HasIndex("SubModuleId");

                    b.HasIndex("UserId");

                    b.ToTable("F_UserSubModules");
                });

            modelBuilder.Entity("Mika.Domain.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Mika.Domain.Entities.SubModule", b =>
                {
                    b.Property<int>("SubModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubModuleId"));

                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<string>("SubDisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SubModuleName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.HasKey("SubModuleId");

                    b.HasIndex("ModuleId");

                    b.ToTable("SubModules");
                });

            modelBuilder.Entity("Mika.Domain.Entities.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Avatar")
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("Creator")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<DateTime?>("LastModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LastModifier")
                        .HasColumnType("bigint");

                    b.Property<string>("LastName")
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonnelNumber")
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(22)
                        .HasColumnType("nvarchar(22)");

                    b.Property<string>("Position")
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<long?>("PrimaryParentId")
                        .HasColumnType("bigint");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("SecodaryParentIDs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Mika.Domain.Entities.Account", b =>
                {
                    b.HasOne("Mika.Domain.Entities.Company", "Company")
                        .WithMany("Accounts")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Mika.Domain.Entities.BiDataEntry", b =>
                {
                    b.HasOne("Mika.Domain.Entities.Account", "Account")
                        .WithMany("BiDataEntries")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mika.Domain.Entities.User", "Creator")
                        .WithMany("BiDataEntries")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("Mika.Domain.Entities.HistoryLog", b =>
                {
                    b.HasOne("Mika.Domain.Entities.User", "Logger")
                        .WithMany("HistoryLogs")
                        .HasForeignKey("LoggerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mika.Domain.Entities.Module", "Module")
                        .WithMany("HistoryLogs")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Logger");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Mika.Domain.Entities.HistoryLogDetail", b =>
                {
                    b.HasOne("Mika.Domain.Entities.HistoryLog", "HistoryLog")
                        .WithMany("HistoryLogDetails")
                        .HasForeignKey("HistoryLogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HistoryLog");
                });

            modelBuilder.Entity("Mika.Domain.Entities.RelationalEntities.F_UserAccount", b =>
                {
                    b.HasOne("Mika.Domain.Entities.Account", "Account")
                        .WithMany("F_UserAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mika.Domain.Entities.User", "User")
                        .WithMany("F_UserAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mika.Domain.Entities.RelationalEntities.F_UserSubModule", b =>
                {
                    b.HasOne("Mika.Domain.Entities.SubModule", "SubModule")
                        .WithMany("F_UserSubModules")
                        .HasForeignKey("SubModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mika.Domain.Entities.User", "User")
                        .WithMany("F_UserSubModules")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubModule");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mika.Domain.Entities.SubModule", b =>
                {
                    b.HasOne("Mika.Domain.Entities.Module", "Module")
                        .WithMany("SubModules")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Mika.Domain.Entities.User", b =>
                {
                    b.HasOne("Mika.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Mika.Domain.Entities.Account", b =>
                {
                    b.Navigation("BiDataEntries");

                    b.Navigation("F_UserAccounts");
                });

            modelBuilder.Entity("Mika.Domain.Entities.Company", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Mika.Domain.Entities.HistoryLog", b =>
                {
                    b.Navigation("HistoryLogDetails");
                });

            modelBuilder.Entity("Mika.Domain.Entities.Module", b =>
                {
                    b.Navigation("HistoryLogs");

                    b.Navigation("SubModules");
                });

            modelBuilder.Entity("Mika.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Mika.Domain.Entities.SubModule", b =>
                {
                    b.Navigation("F_UserSubModules");
                });

            modelBuilder.Entity("Mika.Domain.Entities.User", b =>
                {
                    b.Navigation("BiDataEntries");

                    b.Navigation("F_UserAccounts");

                    b.Navigation("F_UserSubModules");

                    b.Navigation("HistoryLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
